{"version":3,"sources":["components/mapBikes.js","context/socket.js","hooks/useStations.js","components/cityBikes.js","components/historyBikes.js","components/selectedDate.js","App.js","serviceWorker.js","index.js"],"names":["MapBikes","position","stations","zoom","icon","Icon","iconSize","iconUrl","process","Map","center","className","TileLayer","attribution","url","length","map","station","Marker","latitude","longitude","Popup","name","empty_slots","free_bikes","id","socket","socketIOClient","connect","SocketContext","React","createContext","useStations","getStations","JSON","parse","localStorage","getItem","addStations","stationsHistory","setItem","stringify","date","Date","error","console","reset","CityBikes","useContext","cityBikeInformationEndpoint","useState","lat","lng","locationName","cityName","information","setInformation","setStations","startSocket","setStartSocket","showInformation","setShowInformation","handleShowInformation","state","useEffect","getCityBikeInformation","a","axios","get","data","location","city","on","off","onMouseOver","onMouseLeave","HistoryBikes","scope","register","index","moment","format","activeClassName","to","SelectedDate","match","params","selectedStationHistory","find","selectedStation","App","href","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","exact","path","component","title","Boolean","window","hostname","ReactDOM","render","Provider","value","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2317893.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\r\nimport { Icon } from \"leaflet\";\r\n\r\nexport const MapBikes = ({ position, stations, zoom }) => {\r\n  const path = process.env.PUBLIC_URL;\r\n  const icon = new Icon({\r\n    iconSize: [20, 20],\r\n    iconUrl: `${path}/bike.png`,\r\n  });\r\n  return (\r\n    <Map center={position} zoom={zoom} className=\"card\">\r\n      <TileLayer\r\n        attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {stations &&\r\n        stations.length > 0 &&\r\n        stations.map((station) => (\r\n          <Marker\r\n            key={station.id}\r\n            position={[station.latitude, station.longitude]}\r\n            icon={icon}\r\n          >\r\n            <Popup>\r\n              <h6>Name station: {station.name}</h6>\r\n              <hr />\r\n              <div className=\"text-center\">\r\n                <p>Empty slots: {station.empty_slots}</p>\r\n                <p>Free bikes: {station.free_bikes}</p>\r\n              </div>\r\n            </Popup>\r\n          </Marker>\r\n        ))}\r\n    </Map>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport socketIOClient from \"socket.io-client\";\r\n\r\nexport const socket = socketIOClient.connect(process.env.REACT_APP_BASE_URL);\r\nexport const SocketContext = React.createContext();","export const useStations = () => {\r\n  const addStations = (stations) => {\r\n    const stationsHistory = getStations();\r\n    try {\r\n      localStorage.setItem(\r\n        \"stationsHistory\",\r\n        JSON.stringify([...stationsHistory, { date: new Date(), stations }])\r\n      );\r\n    } catch (error) {\r\n      console.error(\"Local storage is full\");\r\n      localStorage.setItem(\r\n        \"stationsHistory\",\r\n        JSON.stringify([{ date: new Date(), stations }])\r\n      );\r\n    }\r\n  };\r\n\r\n  const getStations = () => {\r\n    return JSON.parse(\r\n      localStorage.getItem(\"stationsHistory\")\r\n        ? localStorage.getItem(\"stationsHistory\")\r\n        : []\r\n    );\r\n  };\r\n\r\n  const reset = () => {\r\n    localStorage.setItem(\r\n      \"stationsHistory\",\r\n      JSON.stringify([])\r\n    );\r\n  };\r\n\r\n  return {\r\n    getStations,\r\n    addStations,\r\n    reset,\r\n  };\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { MapBikes } from \"./mapBikes\";\r\nimport { SocketContext } from \"../context/socket\";\r\nimport { useStations } from \"../hooks/useStations\";\r\n\r\nexport const CityBikes = () => {\r\n  const socket = useContext(SocketContext);\r\n  const zoom = 13;\r\n  const cityBikeInformationEndpoint = `${process.env.REACT_APP_BASE_URL}/cityBikeInformation`;\r\n  const [information, setInformation] = useState({\r\n    lat: 51.505,\r\n    lng: -0.09,\r\n    locationName: \"\",\r\n    cityName: \"\",\r\n  });\r\n  const [stations, setStations] = useState([]);\r\n  const [startSocket, setStartSocket] = useState(false);\r\n  const [showInformation, setShowInformation] = useState(false);\r\n  const { addStations } = useStations();\r\n\r\n  const handleShowInformation = (state) => {\r\n    setShowInformation(state);\r\n  };\r\n\r\n  useEffect(() => {\r\n    getCityBikeInformation();\r\n  }, []);\r\n\r\n  const getCityBikeInformation = async () => {\r\n    const {\r\n      data: { location, name, stations },\r\n    } = await axios.get(cityBikeInformationEndpoint);\r\n    setInformation({\r\n      lat: location.latitude,\r\n      lng: location.longitude,\r\n      locationName: location.city,\r\n      cityName: name,\r\n    });\r\n    setStations(stations);\r\n    setStartSocket(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (startSocket && stations) {\r\n      socket.on(\"city-bike-stations\", (stations) => {\r\n        setStations(stations);\r\n        addStations(stations);\r\n      });\r\n      return () => socket.off(\"city-bike-stations\");\r\n    }\r\n  }, [startSocket]);\r\n\r\n  const position = [information.lat, information.lng];\r\n  return (\r\n    <div className=\"card p-4 map animate__animated animate__fadeIn\">\r\n      {information.cityName !== \"\" && (\r\n        <div className=\"d-flex justify-content-between align-items-center\">\r\n          <h1 className=\"mb-4\">\r\n            {information.cityName} - {information.locationName}\r\n          </h1>\r\n\r\n          <div className=\"information-container\">\r\n            <span\r\n              className=\"pointer material-icons information-icon \"\r\n              onMouseOver={() => handleShowInformation(true)}\r\n              onMouseLeave={() => handleShowInformation(false)}\r\n            >\r\n              information\r\n            </span>\r\n            {showInformation && (\r\n              <div className=\"information-content animate__animated animate__fadeInLeft\">\r\n                <h3 className=\"mb-0\">Show availability</h3>\r\n                <p className=\"mt-4\">\r\n                  To see availability, click on a bike on the map\r\n                </p>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n      <MapBikes position={position} stations={stations} zoom={zoom} />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useContext, useEffect, useState } from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\nimport { SocketContext } from \"../context/socket\";\r\nimport { useStations } from \"../hooks/useStations\";\r\n\r\nexport const HistoryBikes = () => {\r\n  const { getStations, addStations } = useStations();\r\n  const socket = useContext(SocketContext);\r\n  const [stations, setStations] = useState(getStations());\r\n  useEffect(() => {\r\n    socket.on(\"city-bike-stations\", (stations) => {\r\n      addStations(stations);\r\n      setStations(getStations());\r\n    });\r\n    return () => socket.off(\"city-bike-stations\");\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className=\"card p-4\">\r\n        <h1 className=\"mb-4 animate__animated animate__fadeIn\">\r\n          History bikes\r\n        </h1>\r\n        <div className=\"scrolled-table animate__animated animate__fadeIn\">\r\n          <table className=\"table mt-4\">\r\n            <thead>\r\n              <tr className=\"fixed-th border-bottom\">\r\n                <th scope=\"col\">#</th>\r\n                <th scope=\"col\">Date</th>\r\n                <th scope=\"col\">Action</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {stations.map((register, index) => (\r\n                <tr key={index} className=\"animate__animated animate__fadeIn\">\r\n                  <td>{index}</td>\r\n                  <td>\r\n                    {moment(register.date).format(\"MMMM DD YYYY, h:mm:ss a\")}\r\n                  </td>\r\n                  <td>\r\n                    <NavLink\r\n                      className=\"nav-link\"\r\n                      activeClassName=\"active\"\r\n                      to={`/selected-date/${register.date}`}\r\n                    >\r\n                      <span className=\"material-icons\">visibility</span>\r\n                    </NavLink>\r\n                  </td>\r\n                </tr>\r\n              ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useStations } from \"../hooks/useStations\";\r\nimport { MapBikes } from \"./mapBikes\";\r\nimport moment from \"moment\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const SelectedDate = ({\r\n  match: {\r\n    params: { date },\r\n  },\r\n}) => {\r\n  const { getStations } = useStations();\r\n  const stationsHistory = getStations();\r\n  const selectedStationHistory = stationsHistory.find(\r\n    (station) => station.date === date\r\n  );\r\n  const selectedStation = selectedStationHistory\r\n    ? selectedStationHistory.stations\r\n    : [];\r\n\r\n  return (\r\n    <div className=\"card p-4 map animate__animated animate__fadeIn\">\r\n      {date !== \"\" && (\r\n        <div className=\"d-flex justify-content-start align-items-center mb-4\">\r\n          <NavLink className=\"btn btn-primary me-2\" activeClassName=\"active\" to={`/history-bikes`}>Back</NavLink>\r\n          <h1>{moment(date).format(\"MMMM DD YYYY, h:mm:ss a\")}</h1>\r\n        </div>\r\n      )}\r\n      <MapBikes\r\n        position={[25.790654, -80.1300455]}\r\n        stations={selectedStation}\r\n        zoom={13}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect } from \"react\";\r\nimport { NavLink, Route, Switch } from \"react-router-dom\";\r\nimport { CityBikes } from \"./components/cityBikes\";\r\nimport { HistoryBikes } from \"./components/historyBikes\";\r\nimport { SelectedDate } from \"./components/selectedDate\";\r\nimport { useStations } from \"./hooks/useStations\";\r\n\r\nexport const App = () => {\r\n  const { reset } = useStations();\r\n  useEffect(() => {\r\n    reset();\r\n  }, []);\r\n  return (\r\n    <div className=\"container mt-4\">\r\n      <nav className=\"navbar navbar-expand-lg navbar-light bg-info bg-gradient mb-4\">\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            CityBike\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarNavDropdown\"\r\n            aria-controls=\"navbarNavDropdown\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarNavDropdown\">\r\n            <ul className=\"navbar-nav\">\r\n              <li className=\"nav-item\">\r\n                <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/\">\r\n                  Home\r\n                </NavLink>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <NavLink\r\n                  className=\"nav-link\"\r\n                  activeClassName=\"active\"\r\n                  to=\"/history-bikes\"\r\n                >\r\n                  History\r\n                </NavLink>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={CityBikes} />\r\n        <Route path=\"/history-bikes\" component={HistoryBikes} />\r\n        <Route path=\"/selected-date/:date\" component={SelectedDate} />\r\n      </Switch>\r\n      <div className=\"mt-4 mb-4 animate__animated animate__fadeIn\">\r\n        Icons made by{\" \"}\r\n        <a href=\"https://www.freepik.com\" title=\"Freepik\">\r\n          Freepik\r\n        </a>{\" \"}\r\n        from{\" \"}\r\n        <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">\r\n          www.flaticon.com\r\n        </a>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport { App } from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { HashRouter } from \"react-router-dom\";\r\nimport { SocketContext, socket } from \"./context/socket\";\r\nReactDOM.render(\r\n  <SocketContext.Provider value={socket}>\r\n    <HashRouter>\r\n      <App />\r\n    </HashRouter>\r\n  </SocketContext.Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}